#LyX 1.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options false
\language english
\inputencoding auto
\font_roman lmodern
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 3cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\bulletLaTeX 0 " "
\bulletLaTeX 1 " "
\bulletLaTeX 2 " "
\bulletLaTeX 3 " "
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
Daniel Benamy - Nicolas Viennot
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
COMS W4115 - C Flat Reference Manual
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The C Flat language is a subset of the C language.
 Some of the core functionalities of C has been stripped: there is no preprocess
or, no structs, no strings, not even pointers.
 it's goal is purely educational.
 Originally Nico and Dan were working on two separate languages.
 The two projects merged, taking some features from each, and this is the
 resulting language.
 This document is inspired by the C Reference Manuel by Dennis Ritchie.
\end_layout

\begin_layout Section
Lexical conventions
\end_layout

\begin_layout Subsection
Whitespace
\end_layout

\begin_layout Standard
A tab, a space or a new line is a whitespace.
 At least one of these charaters is required to separate adjacent identifiers,
 constants, and certain oparator-pairs.
\end_layout

\begin_layout Subsection
Comments
\end_layout

\begin_layout Standard
There are two ways to place comments: 
\begin_inset Formula $\texttt{//}$
\end_inset

 introduces a comment which ends with a end of line.
 
\begin_inset Formula $\texttt{/*}$
\end_inset

 also introduces a comment which ends with 
\begin_inset Formula $\texttt{*/}$
\end_inset

, they can be nested.
 A 
\begin_inset Formula $\texttt{//}$
\end_inset

 inside a 
\begin_inset Formula $\texttt{/* */}$
\end_inset

 comment is ignored.
\end_layout

\begin_layout Subsection
Identifiers
\end_layout

\begin_layout Standard
An identifier is a sequence of letters and digits.
 The first charater must be alphabetic.
 The underscore counts as alphabetic.
 An identifier is case sensitive.
\end_layout

\begin_layout Subsection
Keywords
\end_layout

\begin_layout Standard
The following identifiers are reserved for use as keywords, and may not
 be used otherwise:
\end_layout

\begin_layout Standard
\begin_inset Formula $\texttt{return break continue if else for while try catch throw}$
\end_inset


\end_layout

\begin_layout Subsection
Constants
\end_layout

\begin_layout Standard
There is only one kind of constant: a 32 bits signed integer.
 Such a constant is a sequence of digits represented in its decimal form.
\end_layout

\begin_layout Section
Expressions
\end_layout

\begin_layout Standard
An expression evaluates to a 32 bits signed integer.
 The precedence of operators is discribed in the syntax summary.
\end_layout

\begin_layout Subsection
identifier
\end_layout

\begin_layout Standard
An identifier evaluates to the value of the corresponding variable.
\end_layout

\begin_layout Subsection
literal
\end_layout

\begin_layout Standard
A decimal number is an expression.
\end_layout

\begin_layout Subsection
\begin_inset Formula $\texttt{(}$
\end_inset

 expression 
\begin_inset Formula $\texttt{)}$
\end_inset


\end_layout

\begin_layout Standard
A parenthesized expression evaluates to the parenthesized expression.
\end_layout

\begin_layout Subsection
identifier 
\begin_inset Formula $\texttt{(}$
\end_inset

 expression-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{)}$
\end_inset


\end_layout

\begin_layout Standard
A function call is an expression.
 The arguments are optional and separated with a comma.
 They are evaluated from left to right.
\end_layout

\begin_layout Subsection
\begin_inset Formula $\texttt{-}$
\end_inset

expression
\end_layout

\begin_layout Standard
The result is the negative of the expression.
\end_layout

\begin_layout Subsection
\begin_inset Formula $\texttt{+}$
\end_inset

expression
\end_layout

\begin_layout Standard
The result is the expression itself.
\end_layout

\begin_layout Subsection
\begin_inset Formula $\texttt{!}$
\end_inset

expression
\end_layout

\begin_layout Standard
The result of the logical negation operator 
\begin_inset Formula $\texttt{!}$
\end_inset

 is 1 if the value of the expression is 0, 0 if the value of the expression
 is non-zero.
\end_layout

\begin_layout Subsection
~expression
\end_layout

\begin_layout Standard
The ~ operator yields the one's complement of its operand.
\end_layout

\begin_layout Subsection
\begin_inset Formula $\texttt{++}$
\end_inset

identifier
\end_layout

\begin_layout Standard
The referred variable is incremented when evaluated.
 The expression evaluates to the value of the variable after the incrementation.
\end_layout

\begin_layout Subsection
\begin_inset Formula $\texttt{-}\texttt{-}$
\end_inset

identifier
\end_layout

\begin_layout Standard
The referred variable is decremented when evaluated.
 The expression evaluates to the value of the variable after the decrementation.
\end_layout

\begin_layout Subsection
identifier
\begin_inset Formula $\texttt{++}$
\end_inset


\end_layout

\begin_layout Standard
The referred variable is incremented when evaluated.
 The expression evalutaes to the value of the variable before the incrementation.
\end_layout

\begin_layout Subsection
identifier
\begin_inset Formula $\texttt{-}\texttt{-}$
\end_inset


\end_layout

\begin_layout Standard
The referred variable is decremented when evaluated.
 The expression evaluates to the value of the variable before the decrementation.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{*}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The binary 
\begin_inset Formula $\texttt{*}$
\end_inset

 operator indicates multiplication.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{/}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The binary 
\begin_inset Formula $\texttt{/}$
\end_inset

operator indicates division.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{\%}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The binary 
\begin_inset Formula $\texttt{\%}$
\end_inset

 operator yields the remainder from the division of the first expression
 by the second.
 The remainder has the same sign as the dividend.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{+}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The result is the sum of the expressions.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{-}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The result is the difference of the expressions.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{>\texttt{>}}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

expression 
\begin_inset Formula $\texttt{<}\texttt{<}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The value of the right hand side operand should be non-negative and less
 than 32, if not the result is undefined.
\begin_inset Newline newline
\end_inset

The value of 
\begin_inset Quotes eld
\end_inset

E1 
\begin_inset Formula $\texttt{>}\texttt{>}$
\end_inset

 E2
\begin_inset Quotes erd
\end_inset

 is E1 arithmetically right-shifted by E2 bit positions.
 Vacated bits are filled by a copy of the sign bit of the first expression.
\begin_inset Newline newline
\end_inset

The value of 
\begin_inset Quotes eld
\end_inset

E1 
\begin_inset Formula $\texttt{<}\texttt{<}$
\end_inset

 E2
\begin_inset Quotes erd
\end_inset

 is R1 left-shifted by E2 bit positions.
 Vacated bits are 0-filled.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{<}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

expression 
\begin_inset Formula $\texttt{>}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

expression 
\begin_inset Formula $\texttt{<}\texttt{=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

expression 
\begin_inset Formula $\texttt{>}\texttt{=}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The operators 
\begin_inset Formula $\texttt{<}$
\end_inset

 (less than), 
\begin_inset Formula $\texttt{>}$
\end_inset

 (greater than), 
\begin_inset Formula $\texttt{<}\texttt{=}$
\end_inset

 (less than or equal to), 
\begin_inset Formula $\texttt{>}\texttt{=}$
\end_inset

 (greater than or equal to) all yield 0 if the specified relation is false
 and 1 if it is true.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{==}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

expression 
\begin_inset Formula $\texttt{!=}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The operators 
\begin_inset Formula $\texttt{==}$
\end_inset

 (equal to) and the 
\begin_inset Formula $\texttt{!=}$
\end_inset

 (not equal to) yield 0 if the specified relation is false, 1 if it is true.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{\&}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\texttt{\&}$
\end_inset

 operator yield the bitwise 
\begin_inset Formula $\texttt{and}$
\end_inset

 function of the operands.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\mathcircumflex$
\end_inset

 expression
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\texttt{\&}$
\end_inset

 operator yield the bitwise exclusive 
\begin_inset Formula $\texttt{or}$
\end_inset

 function of the operands.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{|}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\texttt{|}$
\end_inset

 operator yield the bitwise inclusive 
\begin_inset Formula $\texttt{or}$
\end_inset

 function of the operands.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{\&\&}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\texttt{\&\&}$
\end_inset

 operator returns 1 if both operands are non-zero, 0 otherwise.
 Both operands are always evaluated.
\end_layout

\begin_layout Subsection
expression 
\begin_inset Formula $\texttt{||}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\texttt{||}$
\end_inset

 operator returns 1 if either of its operands is non-zero, 0 otherwise.
 Both operands are always evaluated.
\end_layout

\begin_layout Subsection
identifier 
\begin_inset Formula $\texttt{=}$
\end_inset

 expression
\end_layout

\begin_layout Standard
The value of the referred variable is replaced by the value of the expression.
\end_layout

\begin_layout Subsection
identifier 
\begin_inset Formula $\texttt{+=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

identifier 
\begin_inset Formula $\texttt{-=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

identifier 
\begin_inset Formula $\texttt{*=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

identifier 
\begin_inset Formula $\texttt{/=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

identifier 
\begin_inset Formula $\texttt{\%=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

identifier 
\begin_inset Formula $\mbox{\texttt{>}}\texttt{>=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

identifier 
\begin_inset Formula $\texttt{<}\texttt{<=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

identifier 
\begin_inset Formula $\texttt{\&=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

identifier 
\begin_inset Formula $\mathcircumflex\texttt{=}$
\end_inset

 expression
\begin_inset Newline newline
\end_inset

identifier 
\begin_inset Formula $\texttt{|=}$
\end_inset

 expression
\end_layout

\begin_layout Standard
An expression of the form 
\begin_inset Quotes eld
\end_inset

id op= expr
\begin_inset Quotes erd
\end_inset

 is equivalent to 
\begin_inset Quotes eld
\end_inset

id = id op expr
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
Statements
\end_layout

\begin_layout Standard
Statements are executed in sequence.
\end_layout

\begin_layout Subsection
Expression statement
\end_layout

\begin_layout Standard
Most statement are expression statements, which have the form
\end_layout

\begin_layout Standard
expression 
\begin_inset Formula $\texttt{;}$
\end_inset


\end_layout

\begin_layout Subsection
Compound statement
\end_layout

\begin_layout Standard
So that several statements can be used where one is expected, the compound
 statement is provided:
\end_layout

\begin_layout Itemize
compound-statement:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\texttt{\{}$
\end_inset

 statement-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{\}}$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
statement-list:
\end_layout

\begin_deeper
\begin_layout Itemize
statement
\end_layout

\begin_layout Itemize
statement statement-list
\end_layout

\end_deeper
\begin_layout Subsection
Conditional statement
\end_layout

\begin_layout Standard
The two forms of the conditional statement are
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{if (}$
\end_inset

 expression 
\begin_inset Formula $\texttt{)}$
\end_inset

 statement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{if (}$
\end_inset

 expression 
\begin_inset Formula $\texttt{)}$
\end_inset

 statement 
\begin_inset Formula $\texttt{else}$
\end_inset

 statement
\end_layout

\begin_layout Standard
In both cases the expression is evaluated and if it is non-zero, the first
 substatement is executed.
 In the second case the second substatement is executed if the expression
 is 0.
 As usual the 
\begin_inset Quotes eld
\end_inset

else
\begin_inset Quotes erd
\end_inset

 ambiguity is resolved by connecting an 
\begin_inset Formula $\texttt{else}$
\end_inset

 with the last encountered elseless 
\begin_inset Formula $\texttt{if}$
\end_inset

.
\end_layout

\begin_layout Subsection
While statement
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\texttt{while}$
\end_inset

 statement has the form
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{while (}$
\end_inset

 expression 
\begin_inset Formula $\texttt{)}$
\end_inset

 statement
\end_layout

\begin_layout Standard
The substatement is executed repeatedly so long as the value of the expression
 remains non-zero.
 The test takes place before each execution of the statement.
\end_layout

\begin_layout Subsection
For statement
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\texttt{for}$
\end_inset

 statement has the form
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{for (}$
\end_inset

 expression-1
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{;}$
\end_inset

 expression-2
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{;}$
\end_inset

 expression-3
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{)}$
\end_inset

 statement
\end_layout

\begin_layout Standard
This statement is equivalent to
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
expression-1
\begin_inset Formula $\texttt{;}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\texttt{while (}$
\end_inset

 expression-2 
\begin_inset Formula $\texttt{) \{}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\qquad$
\end_inset

statement
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\qquad$
\end_inset

expression-3
\begin_inset Formula $\texttt{;}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\texttt{\}}$
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Any or all the expression may be dropped.
 A missing expression-2 makes the implied 
\begin_inset Formula $\texttt{while}$
\end_inset

 clause equivalent to 
\begin_inset Quotes eld
\end_inset

while(1)
\begin_inset Quotes erd
\end_inset

.
 Other missing expressions are simply dropped from the expansion above.
\end_layout

\begin_layout Subsection
Break statement
\end_layout

\begin_layout Standard
The statement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{break;}$
\end_inset


\end_layout

\begin_layout Standard
casuses termination of the smallest enclosing 
\begin_inset Formula $\texttt{while}$
\end_inset

 or 
\begin_inset Formula $\texttt{for}$
\end_inset

 statement; control passes the the statement following the terminated statement.
\end_layout

\begin_layout Subsection
Continue statement
\end_layout

\begin_layout Standard
The statement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{continue;}$
\end_inset


\end_layout

\begin_layout Standard
causes control to pass to the loop-continuation portion of the smallest
 enclosing 
\begin_inset Formula $\texttt{while}$
\end_inset

 or 
\begin_inset Formula $\texttt{for}$
\end_inset

 statement; that is to the end of the loop.
 In case of a 
\begin_inset Formula $\texttt{for}$
\end_inset

 loop of the form 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\texttt{for(e1;e2;e3) \{...\}}$
\end_inset


\begin_inset Quotes erd
\end_inset

, 
\begin_inset Formula $\texttt{e3}$
\end_inset

 is evaluated before evaluating 
\begin_inset Formula $\texttt{e2}$
\end_inset

.
 TODO Rephrase.
\end_layout

\begin_layout Subsection
Return statement
\end_layout

\begin_layout Standard
A function returns to its caller by means of the 
\begin_inset Formula $\texttt{return}$
\end_inset

 statement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{return}$
\end_inset

 expression 
\begin_inset Formula $\texttt{;}$
\end_inset


\end_layout

\begin_layout Standard
The value of the expression is returned to the caller of the function.
\end_layout

\begin_layout Subsection
Null statement
\end_layout

\begin_layout Standard
The null statement has the form
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{;}$
\end_inset


\end_layout

\begin_layout Standard
A null statement is useful to supply a null body to a looping statement
 such as 
\begin_inset Formula $\texttt{while}$
\end_inset

.
\end_layout

\begin_layout Subsection
Try-catch statement
\end_layout

\begin_layout Standard
The two form of the try-catch statement are
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{try \{}$
\end_inset

 statement-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $\texttt{ \} catch ( }$
\end_inset

identifier
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit

\begin_inset Formula $\texttt{ ) \{}$
\end_inset

 statement-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset


\begin_inset Formula $\texttt{ \}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{try \{}$
\end_inset

 statement-list
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $_{\mathrm{opt}}$
\end_inset


\begin_inset Formula $\texttt{ \} catch }$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit

\begin_inset Formula $\texttt{\{}$
\end_inset

 statement-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset


\begin_inset Formula $\texttt{ \}}$
\end_inset


\end_layout

\begin_layout Standard
The statments enclosed in the try block are executed until an exception
 is thrown.
 In case no exception is thrown, the statments enclosed in the catch block
 are not executed.
 The first form of the try-catch statement allows to assign the value of
 the exception to a variable.
\end_layout

\begin_layout Standard
TODO say they dynamically stack.
\end_layout

\begin_layout Subsection
Throw statement
\end_layout

\begin_layout Standard
The throw statement has the form
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{throw}$
\end_inset

 expression 
\begin_inset Formula $\texttt{;}$
\end_inset


\end_layout

\begin_layout Standard
Throwing an exception causes control to pass to the catch block of the nearest
 dynamically-enclosing try-catch statement.
 If none is found, it causes the program to terminate with an error.
 The given expression is the value of the thrown exception.
\end_layout

\begin_layout Section
Program definition
\end_layout

\begin_layout Standard
A ltc program consists of a sequence of function definition.
\end_layout

\begin_layout Itemize
program:
\end_layout

\begin_deeper
\begin_layout Itemize
function-definition
\end_layout

\begin_layout Itemize
function-definition program
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
function-definition:
\end_layout

\begin_deeper
\begin_layout Itemize
identifier 
\begin_inset Formula $\texttt{(}$
\end_inset

 parameter-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{) \{}$
\end_inset

 statement-list
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $_{\mathrm{opt}}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 
\begin_inset Formula $\texttt{\}}$
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
parameter-list:
\end_layout

\begin_deeper
\begin_layout Itemize
identifier
\end_layout

\begin_layout Itemize
identifier 
\begin_inset Formula $\texttt{,}$
\end_inset

 parameter-list
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
A simple exemple of a complete function definition:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Formula $\texttt{max (a, b, c) \{}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\quad\texttt{if (a > b) m = a; else m = b;}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\quad\texttt{if (m > c) return m; else return c;}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\texttt{\}}$
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Scope rules
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Standard
variables: scope is the function
\end_layout

\begin_layout Standard
different namespace for variables and function
\end_layout

\begin_layout Standard
can call whatever function with any number of arguments
\end_layout

\begin_layout Standard
function returning without a return ...;
\end_layout

\begin_layout Section
Syntax Summary
\end_layout

\begin_layout Subsection
Expressions
\end_layout

\begin_layout Itemize
expression:
\end_layout

\begin_deeper
\begin_layout Itemize
identifier
\end_layout

\begin_layout Itemize
literal
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{(}$
\end_inset

 expression 
\begin_inset Formula $\texttt{)}$
\end_inset


\end_layout

\begin_layout Itemize
identifier 
\begin_inset Formula $\texttt{(}$
\end_inset

 expression-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{)}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{-}$
\end_inset

expression
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{+}$
\end_inset

expression
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{!}$
\end_inset

expression
\end_layout

\begin_layout Itemize
\begin_inset Formula $\sim$
\end_inset

expression
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{++}$
\end_inset

identifier
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{-}\texttt{-}$
\end_inset

identifier
\end_layout

\begin_layout Itemize
identifier
\begin_inset Formula $\texttt{++}$
\end_inset


\end_layout

\begin_layout Itemize
identifier
\begin_inset Formula $\texttt{-}\texttt{-}$
\end_inset


\end_layout

\begin_layout Itemize
expression binop expression
\end_layout

\begin_layout Itemize
identifier asgnop expression
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
expression-list:
\end_layout

\begin_deeper
\begin_layout Itemize
expression
\end_layout

\begin_layout Itemize
expression 
\begin_inset Formula $\texttt{,}$
\end_inset

 expression-list
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
The unary operators 
\begin_inset Formula $\texttt{- + !}\sim$
\end_inset

 have higher priority than binary operator.
\begin_inset Newline newline
\end_inset

Binary operators all group left to right and have priority decreasing as
 indicated:
\end_layout

\begin_layout Itemize
binop:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\texttt{* / \%}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{+ -}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{>}\mbox{\texttt{>} }\texttt{<}\texttt{<}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{< > <= >=}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{== !=}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{\&}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\wedge$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{|}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{\&\&}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{||}$
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Assignment operator all have the same priority, and all group right to left.
\end_layout

\begin_layout Itemize
asgnop:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\texttt{= += -= *= /= \%= >}\texttt{>= <}\texttt{<= \&= }\wedge\texttt{= |=}$
\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Statements
\end_layout

\begin_layout Itemize
statement:
\end_layout

\begin_deeper
\begin_layout Itemize
expression 
\begin_inset Formula $\texttt{;}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{\{}$
\end_inset

 statement-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{\}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{if (}$
\end_inset

 expression 
\begin_inset Formula $\texttt{)}$
\end_inset

 statement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{if (}$
\end_inset

 expression 
\begin_inset Formula $\texttt{)}$
\end_inset

 statement 
\begin_inset Formula $\texttt{else}$
\end_inset

 statement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{while (}$
\end_inset

 expression 
\begin_inset Formula $\texttt{)}$
\end_inset

 statement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{for (}$
\end_inset

 expression
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{;}$
\end_inset

 expression
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{;}$
\end_inset

 expression
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{)}$
\end_inset

 statement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{break;}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{continue;}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{return}$
\end_inset

 expression
\begin_inset Formula $\texttt{;}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{try \{}$
\end_inset

 statement-list
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $_{\mathrm{opt}}$
\end_inset


\begin_inset Formula $\texttt{ \} catch }$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit

\begin_inset Formula $\texttt{\{}$
\end_inset

 statement-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset


\begin_inset Formula $\texttt{ \}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{try \{}$
\end_inset

 statement-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $\texttt{ \} catch ( }$
\end_inset

identifier
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit

\begin_inset Formula $\texttt{ ) \{}$
\end_inset

 statement-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset


\begin_inset Formula $\texttt{ \}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{throw}$
\end_inset

 expression
\begin_inset Formula $\texttt{;}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{;}$
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
statement-list:
\end_layout

\begin_deeper
\begin_layout Itemize
statement
\end_layout

\begin_layout Itemize
statement statement-list
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Program definition
\end_layout

\begin_layout Itemize
program:
\end_layout

\begin_deeper
\begin_layout Itemize
function-definition
\end_layout

\begin_layout Itemize
function-definition program
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
function-definition:
\end_layout

\begin_deeper
\begin_layout Itemize
identifier 
\begin_inset Formula $\texttt{(}$
\end_inset

 parameter-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{) \{}$
\end_inset

 statement-list
\begin_inset Formula $_{\mathrm{opt}}$
\end_inset

 
\begin_inset Formula $\texttt{\}}$
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
parameter-list:
\end_layout

\begin_deeper
\begin_layout Itemize
identifier
\end_layout

\begin_layout Itemize
identifier 
\begin_inset Formula $\texttt{,}$
\end_inset

 parameter-list
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\end_body
\end_document
