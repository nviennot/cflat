# The first line that doesn't start with a '#' should be the compiler command.
# It should read source code from stdin and produce an executable named
# 'temp.exe'.
bash -c '(./microc > temp.s && gcc -m32 -c temp.s -o temp.o && gcc -m32 temp.o lib.o -o temp.exe)'

After the compiler command, anything not within a test case (surrounded by ...)
is ignored.
The closing ... should be followed by a space and then the desired result of the
test:
* OK if the code should compile,
* BAD if the code shouldn't compile, or
* Any other single line string which the code, when run, should produce.
  Whitespace may be trimmed from the front or back.


Whitespace tests

...
main() {
}
... OK

...
main() {
	bad
}
... BAD

...
main() {
	out(123);
}
... 123

...
main() {
	if (1)  out(1);
	else    out(2);
}
... 1

...
main() {
	if (0) out(1);
	else   out(2);
}
... 2


Dynamic labels

...
main() {
	if (0) out(1);
	else if (1) out (2);
	else out (3);
}
... 2

...
main() {
	int i;
	int j;
	for (i = 0; i < 2; i = i + 1) {
		while (0) {
		}
		for (j = 0; j < 2; j = j + 1) {
			out (i + j);
		}
	}
}
... 0 1 1 2

-------------------

...
func(a) {
	out (a);
}

main() {
	func(1);
}
... 1

...
fib(x) {
	if (x < 3) return 1;
	return fib(x-1) + fib(x-2);
}
main() {
	out(fib(10));
}
... 55

...
main() {
	int a;
	int b;
	a = 2;
	b = 3;
	out (a+b);
}
... 5

...
main() {
	int i;
	int sum;

	sum = 0;
	for (i = 0; i <= 10; i=i+1)
		sum = sum + i;
	out(sum);
}
... 55

...
func(a) {
	a-1;
}
main() {
	int a;
	a = 10;
	while(func(a))
		a = func(a);
	out(a);
}
... 1

...
main () {
	if (1) {
		break;
	}
}
... BAD

...
main () {
	break;
}
... BAD

...
break;
main () {
}
... BAD

...
main () {
	int i;
	for (i = 0; i < 10; i = i + 1) {
		break;
		out(3);
	}
	out(5);
}
... 5

...
main () {
	int i;
	for (i = 0; i < 10; i = i + 1) {
		if (i > 2) {
			break;
		}
		out(3);
	}
	out(5);
}
... 3 3 3 5

...
main () {
	int i;
	for (i = 0; i < 4; i = i + 1) {
		if (i == 1) {
			continue;
		}
		out(3);
	}
	out(5);
}
... 3 3 3 5

...
main () {
	int i;
	int i;
}
... BAD
